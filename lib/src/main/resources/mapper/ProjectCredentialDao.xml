<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.coding.lib.project.dao.credentail.ProjectCredentialDao">
    <resultMap id="BaseResultMap" type="net.coding.lib.project.entity.Credential">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="generate_by" jdbcType="VARCHAR" property="generateBy"/>
        <result column="scope" jdbcType="VARCHAR" property="scope"/>
        <result column="team_id" jdbcType="INTEGER" property="teamId"/>
        <result column="project_id" jdbcType="INTEGER" property="projectId"/>
        <result column="creator_id" jdbcType="INTEGER" property="creatorId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="credential_id" jdbcType="VARCHAR" property="credentialId"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="scheme" jdbcType="TINYINT" property="scheme"/>
        <result column="verification_method" jdbcType="VARCHAR" property="verificationMethod"/>
        <result column="kub_config" jdbcType="VARCHAR" property="kubConfig"/>
        <result column="cluster_name" jdbcType="VARCHAR" property="clusterName"/>
        <result column="accept_untrusted_certificates" jdbcType="BOOLEAN"
                property="acceptUntrustedCertificates"/>
        <result column="host" jdbcType="VARCHAR" property="host"/>
        <result column="port" jdbcType="SMALLINT" property="port"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="private_key" jdbcType="VARCHAR" property="privateKey"/>
        <result column="token" jdbcType="VARCHAR" property="token"/>
        <result column="app_id" jdbcType="VARCHAR" property="appId"/>
        <result column="secret_id" jdbcType="VARCHAR" property="secretId"/>
        <result column="secret_key" jdbcType="VARCHAR" property="secretKey"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="state" jdbcType="TINYINT" property="state"/>
        <result column="all_select" jdbcType="BOOLEAN" property="allSelect"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
        <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , generate_by, `scope`, team_id, project_id, creator_id, `name`, credential_id,
    `type`, scheme, verification_method, kub_config, cluster_name, accept_untrusted_certificates,
    `host`, port, url, username, `password`, private_key, token, app_id, secret_id, secret_key,
    description, `state`, all_select, created_at, updated_at, deleted_at
    </sql>
    <update id="delete">
        update ci_connections
        set deleted_at = NOW()
        where id = #{id}
    </update>
    <update id="updateSecretKey">
        update ci_connections
        set secret_key = #{secretKey}
        where id = #{id}
          and deleted_at = #{deletedAt}
    </update>
    <select id="findPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM ci_connections
        <where>

            project_id = #{projectId}
            AND generate_by = 'MANUAL'
            <choose>
                <when test="type != null and type != ''">
                    AND type = #{type}
                </when>
                <otherwise>
                    AND type != 'OAUTH'
                </otherwise>
            </choose>
            AND deleted_at = #{deletedAt}
            ORDER BY id DESC
        </where>

    </select>
    <select id="get" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM ci_connections
        WHERE
        id = #{id}
        AND project_id = #{projectId}
        AND deleted_at = #{deletedAt}

    </select>

    <select id="getByProjectIdAndGenerateBy" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM ci_connections
        WHERE
        project_id = #{projectId}
        AND generate_by = #{generateBy}
        AND deleted_at = #{deletedAt}

    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from ci_connections
        where id = #{id}
        and deleted_at = #{deletedAt}
    </select>
    <select id="getCredential" resultType="net.coding.lib.project.entity.Credential">
        select
        <include refid="Base_Column_List"/>
        from ci_connections
        WHERE (creator_id = #{userId} OR `scope`=1)
        AND project_id = #{projectId}
        AND deleted_at = #{deletedAt}
        <if test="id != 0">
            AND id = #{id}
        </if>
    </select>

    <select id="getByIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from ci_connections
        where
        id in
        <foreach item="item" index="index" collection="list" open="(" close=")" separator=",">
            #{item}
        </foreach>
        and deleted_at=#{deletedAt}
    </select>
    <select id="getByCredentialId" resultMap="BaseResultMap">
        select *
        from ci_connections
        where credential_id = #{credentialId}
          and deleted_at = #{deletedAt}
    </select>
    <select id="listByProjectAndUser" resultMap="BaseResultMap">
        select *
        from ci_connections
        <where>
            project_id = #{projectId}
            AND generate_by = 'MANUAL'
            AND type != 'OAUTH'
            AND creator_id = #{userId}
            AND all_select= #{allSelect}
            AND deleted_at = #{deletedAt}
            ORDER BY id DESC
        </where>
    </select>
    <select id="getCredentialsByTaskIdAndGenerateBy"
            resultType="net.coding.lib.project.entity.Credential">
        SELECT DISTINCT
        <include refid="Base_Column_List"/>
        FROM ci_connections
        where deleted_at=#{deletedAt}
        and generate_by=#{generateBy}
        and id in (
        select conn_id
        from ci_connection_perms
        where project_id=#{projectId} and task_id=#{taskId} and deleted_at=#{deletedAt}
        )
        or (
        project_id=#{projectId}
        and all_select=1
            )
    </select>
    <select id="getCredentialsByTaskIdAndType"
            resultType="net.coding.lib.project.entity.Credential">
        SELECT DISTINCT
        <include refid="Base_Column_List"/>
        FROM ci_connections
        where deleted_at=#{deletedAt}
        and `type`=#{type}
        and id in (
        select conn_id
        from ci_connection_perms
        where project_id=#{projectId}
        and task_id=#{taskId}
        and deleted_at=#{deletedAt}
        )
        or (
            project_id=#{projectId}
        and all_select=1
            )
    </select>
    <select id="getCredentialsByTaskId"
            resultType="net.coding.lib.project.entity.Credential">
        SELECT DISTINCT
        <include refid="Base_Column_List"/>
        FROM ci_connections
        where deleted_at=#{deletedAt}
        and id in (
        select conn_id
        from ci_connection_perms
        where project_id=#{projectId} and task_id=#{taskId} and deleted_at=#{deletedAt}
        )
        or (
        project_id=#{projectId}
        and all_select=1
            )
    </select>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="net.coding.lib.project.entity.Credential" useGeneratedKeys="true">
        insert into ci_connections
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="generateBy != null">
                generate_by,
            </if>
            <if test="scope != null">
                `scope`,
            </if>
            <if test="teamId != null">
                team_id,
            </if>
            <if test="projectId != null">
                project_id,
            </if>
            <if test="creatorId != null">
                creator_id,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="credentialId != null">
                credential_id,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="scheme != null">
                scheme,
            </if>
            <if test="verificationMethod != null">
                verification_method,
            </if>
            <if test="kubConfig != null">
                kub_config,
            </if>
            <if test="clusterName != null">
                cluster_name,
            </if>
            <if test="acceptUntrustedCertificates != null">
                accept_untrusted_certificates,
            </if>
            <if test="host != null">
                `host`,
            </if>
            <if test="port != null">
                port,
            </if>
            <if test="url != null">
                url,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                `password`,
            </if>
            <if test="privateKey != null">
                private_key,
            </if>
            <if test="token != null">
                token,
            </if>
            <if test="appId != null">
                app_id,
            </if>
            <if test="secretId != null">
                secret_id,
            </if>
            <if test="secretKey != null">
                secret_key,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="state != null">
                `state`,
            </if>
            <if test="allSelect != null">
                all_select,
            </if>
            created_at,
            updated_at,
            deleted_at,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="generateBy != null">
                #{generateBy,jdbcType=VARCHAR},
            </if>
            <if test="scope != null">
                #{scope,jdbcType=VARCHAR},
            </if>
            <if test="teamId != null">
                #{teamId,jdbcType=INTEGER},
            </if>
            <if test="projectId != null">
                #{projectId,jdbcType=INTEGER},
            </if>
            <if test="creatorId != null">
                #{creatorId,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="credentialId != null">
                #{credentialId,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="scheme != null">
                #{scheme,jdbcType=TINYINT},
            </if>
            <if test="verificationMethod != null">
                #{verificationMethod,jdbcType=VARCHAR},
            </if>
            <if test="kubConfig != null">
                #{kubConfig,jdbcType=VARCHAR},
            </if>
            <if test="clusterName != null">
                #{clusterName,jdbcType=VARCHAR},
            </if>
            <if test="acceptUntrustedCertificates != null">
                #{acceptUntrustedCertificates,jdbcType=BOOLEAN},
            </if>
            <if test="host != null">
                #{host,jdbcType=VARCHAR},
            </if>
            <if test="port != null">
                #{port,jdbcType=SMALLINT},
            </if>
            <if test="url != null">
                #{url,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="privateKey != null">
                #{privateKey,jdbcType=VARCHAR},
            </if>
            <if test="token != null">
                #{token,jdbcType=VARCHAR},
            </if>
            <if test="appId != null">
                #{appId,jdbcType=VARCHAR},
            </if>
            <if test="secretId != null">
                #{secretId,jdbcType=VARCHAR},
            </if>
            <if test="secretKey != null">
                #{secretKey,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=TINYINT},
            </if>
            <if test="allSelect != null">
                #{allSelect,jdbcType=BOOLEAN},
            </if>
            NOW(),
            NOW(),
            '1970-01-01 00:00:00'
        </trim>
    </insert>

    <update id="updateBaseInfo" parameterType="net.coding.lib.project.entity.Credential">
        update ci_connections
        set `name`      = #{name},
            description = #{description},
            `scope`     = #{scope},
            all_select  = #{allSelect},
            updated_at  = NOW()
        where id = #{id}
    </update>

    <update id="updateByPrimaryKeySelective"
            parameterType="net.coding.lib.project.entity.Credential">
        update ci_connections
        <set>
            <if test="generateBy != null and generateBy != ''">
                generate_by = #{generateBy,jdbcType=VARCHAR},
            </if>
            <if test="scope != null and scope != ''">
                `scope` = #{scope,jdbcType=VARCHAR},
            </if>
            <if test="name != null and name != ''">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="credentialId != null and credentialId != ''">
                credential_id = #{credentialId,jdbcType=VARCHAR},
            </if>
            <if test="type != null and type != ''">
                `type` = #{type,jdbcType=VARCHAR},
            </if>
            <if test="scheme != null and scheme != ''">
                scheme = #{scheme,jdbcType=TINYINT},
            </if>
            <if test="verificationMethod != null and verificationMethod != ''">
                verification_method = #{verificationMethod,jdbcType=VARCHAR},
            </if>
            <if test="kubConfig != null and kubConfig != ''">
                kub_config = #{kubConfig,jdbcType=VARCHAR},
            </if>
            <if test="clusterName != null and clusterName != ''">
                cluster_name = #{clusterName,jdbcType=VARCHAR},
            </if>
            <if test="acceptUntrustedCertificates != null and acceptUntrustedCertificates != ''">
                accept_untrusted_certificates = #{acceptUntrustedCertificates,jdbcType=BOOLEAN},
            </if>
            <if test="host != null and host != ''">
                `host` = #{host,jdbcType=VARCHAR},
            </if>
            <if test="port != null and port != ''">
                port = #{port,jdbcType=SMALLINT},
            </if>
            <if test="url != null and url != ''">
                url = #{url,jdbcType=VARCHAR},
            </if>
            <if test="username != null and username != ''">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null and password != ''">
                `password` = #{password,jdbcType=VARCHAR},
            </if>
            <if test="privateKey != null and privateKey != ''">
                private_key = #{privateKey,jdbcType=VARCHAR},
            </if>
            <if test="token != null and token != ''">
                token = #{token,jdbcType=VARCHAR},
            </if>
            <if test="appId != null and appId != ''">
                app_id = #{appId,jdbcType=VARCHAR},
            </if>
            <if test="secretId != null and secretId != ''">
                secret_id = #{secretId,jdbcType=VARCHAR},
            </if>
            <if test="secretKey != null and secretKey != ''">
                secret_key = #{secretKey,jdbcType=VARCHAR},
            </if>
            <if test="description != null ">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="state != null and state != ''">
                `state` = #{state,jdbcType=TINYINT},
            </if>
            <if test="allSelect != null">
                all_select = #{allSelect,jdbcType=BOOLEAN},
            </if>
            updated_at = NOW(),
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateUsernamePassword" parameterType="net.coding.lib.project.entity.Credential">
        update ci_connections
        set username   = #{username},
            password   = #{password},
            updated_at = NOW()
        where id = #{id}
    </update>
</mapper>
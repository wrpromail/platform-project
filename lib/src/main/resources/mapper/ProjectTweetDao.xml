<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.coding.lib.project.dao.ProjectTweetDao">
  <resultMap id="BaseResultMap" type="net.coding.lib.project.entity.ProjectTweet">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="owner_id" jdbcType="INTEGER" property="ownerId" />
    <result column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="raw" jdbcType="VARCHAR" property="raw" />
    <result column="comments" jdbcType="INTEGER" property="comments" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt" />
  </resultMap>
  <sql id="Base_Column_List">
    id, owner_id, project_id, content, `raw`, comments, created_at, updated_at, deleted_at
  </sql>
  <select id="getById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from project_tweets
    where id = #{id,jdbcType=INTEGER}
  </select>

  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="net.coding.lib.project.entity.ProjectTweet" useGeneratedKeys="true">
    insert into project_tweets
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="ownerId != null">
        owner_id,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="raw != null">
        `raw`,
      </if>
      <if test="comments != null">
        comments,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deletedAt != null">
        deleted_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="ownerId != null">
        #{ownerId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="raw != null">
        #{raw,jdbcType=VARCHAR},
      </if>
      <if test="comments != null">
        #{comments,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        #{deletedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <update id="update" parameterType="net.coding.lib.project.entity.ProjectTweet">
    update project_tweets
    <set>
      <if test="ownerId != null">
        owner_id = #{ownerId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="raw != null">
        `raw` = #{raw,jdbcType=VARCHAR},
      </if>
      <if test="comments != null">
        comments = #{comments,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findList" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM project_tweets
    <where>
      <if test="projectId != null">
        AND project_id = #{projectId}
      </if>
      <if test="deletedAt != null">
        AND deleted_at = #{deletedAt}
      </if>
    </where>
    ORDER BY id DESC
  </select>

  <select id="getLast" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM project_tweets
    <where>
      <if test="projectId != null">
        AND project_id = #{projectId}
      </if>
      <if test="deletedAt != null">
        AND deleted_at = #{deletedAt}
      </if>
    </where>
    ORDER BY id DESC
    LIMIT 1
  </select>

  <select id="getLastTweetInTenMinutes" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM project_tweets
    <where>
      <if test="ownerId != null">
        AND owner_id = #{ownerId}
      </if>
      <if test="updatedAt != null">
        AND updated_at > #{updatedAt}
      </if>
    </where>
    ORDER BY id DESC
    LIMIT 1
  </select>

</mapper>
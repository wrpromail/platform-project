syntax = "proto3";

import "common.proto";
import "google/protobuf/timestamp.proto";

package app.grpc.enterprise.credential;

option java_generic_services = true;
option java_package = "net.coding.proto";
option java_outer_classname = "CredentialProto";

message CreateCredentialRequest {
  string user_gk = 1;
  bool encrypt = 2;
  CredentialForm form = 3;
}

message CredentialForm {
  CredentialType type = 1;
  CredentialScope scope = 2;
  ConnGenerateBy generated_by = 3;
  int32 id = 4;
  int32 team_id = 5;
  int32 project_id = 6;
  int32 creator_id = 7;
  string credential_id = 8;
  string name = 9;
  string description = 10;
  bool all_select = 11;
  string username = 12;
  string password = 13;
  string token = 14;
  string secret_id = 15;
  string secret_key = 16;
  string app_id = 17;
  string private_key = 18;
  // kubernetes
  VerificationMethod verification_method = 19;
  string kub_config = 20;
  string cluster_name = 21;
  bool accept_untrusted_certificates = 22;
  string url = 23;
}

enum VerificationMethod {
  KUBECONFIG = 0;
  SERVICE_ACCOUNT = 1;
}


// 凭据类型
enum CredentialType {
  PASSWORD = 0;
  USERNAME_PASSWORD_TYPE = 1; // conflict with JenkinsCredentialScheme, add a suffix
  TOKEN = 2;
  SECRET_KEY = 3;
  APP_ID_SECRET_KEY = 4;
  SSH = 5;
  SSH_TOKEN = 6;
  USERNAME_PASSWORD_TOKEN = 7;
  OAUTH = 8;
  KUBERNETES = 9;
  ANDROID_CERTIFICATE = 10;
  IOS_CERTIFICATE = 11;
  TLS_CERTIFICATE = 12;
  TENCENT_SERVERLESS = 13;
}

// 凭据范围
enum CredentialScope {
  PROJECT = 0; // 项目内公开
  PRIVATE = 1; // 个人私有
}

enum ConnGenerateBy {
  AUTO = 0;
  MANUAL = 1;
  DOCKER_REGISTRY = 2;
  NPM_REGISTRY = 3;
  ARTIFACT_SCANNING = 4;
}

message GetByIdRequest {
  int32 team_id = 1;
  int32 project_id = 2;
  string user_gk = 3;
  int32 id = 4;
  bool decrypt = 5;
}

message GetCredentialResponse {
  int32 code = 1;
  string msg = 2;
  Credential data = 3;
}

message Credential {
  int32 id = 1; // 凭据编号
  int32 teamId = 2;
  int32 projectId = 3;
  CredentialScope scope = 4;
  string name = 5;
  CredentialType type = 6;
  string credentialId = 7; // 凭据ID，UUID格式
  int32 scheme = 8;
  string username = 9;
  string password = 10;
  string private_key = 11;
  string token = 12;
  string appId = 13;
  string secretId = 14;
  string secretKey = 15;
  string description = 16;
  string kubeType = 17;
  string kubeConfig = 18;
  string kubeUrl = 19; // url
  ConnGenerateBy generated_by = 20;
  int32 creator_id = 21;
  VerificationMethod verification_method = 22;
  string cluster_name = 23;
  bool accept_untrusted_certificates = 24;
  int32 state = 25;
  bool all_select = 26;
  google.protobuf.Timestamp created_at = 27;
  google.protobuf.Timestamp updated_at = 28;
  google.protobuf.Timestamp deleted_at = 29;
}

service CredentialService {
  rpc CreateCredential (CreateCredentialRequest) returns (Result);
  rpc GetById (GetByIdRequest) returns (GetCredentialResponse);
}